#+title: Office utils

* Scalai
** Concat imports
After call ~scalai-pretty-imports~ following import will be concat to compact form. Sorted by alphabet.

There is an additional behavior when class names compared with rest of the file and comment them.
Custom: ~scalai-ignore-import-list~ - to keep some special imports in any case.

Benefits: Removes only duplicates

*** Default behavior
Before:
#+begin_src scala
import com.office.domain.Person
import com.office.domain.Invoce
import com.office.maintenance.InvoceCalculator
import com.office.maintenance.UserAggregator
import com.office.UselessService

class Main {
  def main(args: Array[String]) = ???
}
#+end_src

After:
#+begin_src scala
import com.office.UselessService
import com.office.domain.{Invoce, Person}
import com.office.maintenance.{InvoceCalculator, UserAggregator}

class Main {
  def main(args: Array[String]) = ???
}
#+end_src
*** Comment extra imports behavior
Before:
#+begin_src scala
import com.office.domain.Person
import com.office.domain.Invoce
import com.office.maintenance.InvoceCalculator
import com.office.maintenance.UserAggregator
import com.office.UselessService

class Main {
  def main(args: Array[String]) = {
    val person = new Person("vasya", "petrovic", age = 21)
    UserAggregator.registerUser(person)
  }
}
#+end_src

After:
#+begin_src scala
import com.office.UselessService
import com.office.domain.Person
//import com.office.domain.Invoce
import com.office.maintenance.UserAggregator
//import com.office.maintenance.InvoceCalculator

class Main {
  def main(args: Array[String]) = {
    val person = new Person("vasya", "petrovic", age = 21)
    UserAggregator.registerUser(person)
    UselessService.putAsUseless(person)
  }
}
#+end_src
** Seporate line arguments for function
~scalai-sep-args~

Before:
#+begin_src scala
  def main(    v: String, a:    Seq[(String, Any)],   b: Map[Any, _]) = ???
  case class Person(    v: String, a:    Seq[(String, Any)],   b: Map[Any, _])
#+end_src

After:
#+begin_src scala
  def main(
      v: String,
      a: Seq[(String, Any)],
      b: Map[Any, _]
  ) = ???

  case class Person(
      v: String,
      a: Seq[(String, Any)],
      b: Map[Any, _]
  )
#+end_src

Customize:
- scalai-function-args-indention
* Jira :todo:
Transform .org to jira markdown
Call function ~jira-from-org-kill~ in .org file and get converted data in clipboard.

* Jsoni :todo:
Just one function to minimize json ~jsoni-minimalize~ in whole buffer

Before:
#+begin_src json
{
    "string": "some value",
    "array": [
        "hi there",
        "hi there again"
    ],
    "object": {
        "key1": "value",
        "key2": 999
    },
    "int": 100,
    "boolean": true,
    "booleanFalse": false
}
#+end_src
After:
#+begin_src json
{"string":"some value","array":["hi there","hi there again"],"object":{"key1":"value","key2":999},"int":100,"boolean":true,"booleanFalse":false}
#+end_src
* Mermaid :todo:
* Text-util :todo:
In general there are common function to edit files.

~text-util-from-camel-case-range~ - TransforCamelCaseRange to snake_case_range
* Restclienti
A few function which help me works with .http files

Demo:
[[./restclienti.gif][restclienti.gif]]
