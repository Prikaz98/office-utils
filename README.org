#+title: Office utils

* Scalai
** Concat imports
After call ~scalai-pretty-imports~ following import will be concat to compact form. Sorted by alphabet.

There is an additional behavior when class names compared with rest of the file and comment them.
Custom: ~scalai-ignore-import-list~ - to keep some special imports in any case.

Benefits: Removes only duplicates

*** Default behavior
Before:
#+begin_src scala
import com.office.domain.Person
import com.office.domain.Invoce
import com.office.maintenance.InvoceCalculator
import com.office.maintenance.UserAggregator
import com.office.UselessService

class Main {
  def main(args: Array[String]) = ???
}
#+end_src

After:
#+begin_src scala
import com.office.UselessService
import com.office.domain.{Invoce, Person}
import com.office.maintenance.{InvoceCalculator, UserAggregator}

class Main {
  def main(args: Array[String]) = ???
}
#+end_src
*** Comment extra imports behavior
Before:
#+begin_src scala
import com.office.domain.Person
import com.office.domain.Invoce
import com.office.maintenance.InvoceCalculator
import com.office.maintenance.UserAggregator
import com.office.UselessService

class Main {
  def main(args: Array[String]) = {
    val person = new Person("vasya", "petrovic", age = 21)
    UserAggregator.registerUser(person)
  }
}
#+end_src

After:
#+begin_src scala
import com.office.UselessService
import com.office.domain.Person
//import com.office.domain.Invoce
import com.office.maintenance.UserAggregator
//import com.office.maintenance.InvoceCalculator

class Main {
  def main(args: Array[String]) = {
    val person = new Person("vasya", "petrovic", age = 21)
    UserAggregator.registerUser(person)
    UselessService.putAsUseless(person)
  }
}
#+end_src
** Seporate line arguments for function
~scalai-sep-args~

Before:
#+begin_src scala
  def main(    v: String, a:    Seq[(String, Any)],   b: Map[Any, _]) = ???
  case class Person(    v: String, a:    Seq[(String, Any)],   b: Map[Any, _])
#+end_src

After:
#+begin_src scala
  def main(
      v: String,
      a: Seq[(String, Any)],
      b: Map[Any, _]
  ) = ???

  case class Person(
      v: String,
      a: Seq[(String, Any)],
      b: Map[Any, _]
  )
#+end_src

Customize:
- scalai-function-args-indention
** Find import
~scalai-find-import~ collect unique imports lines with transformation concatenated imports to separate lines, stores it in ~scalai-cache-file~ and offer this imports as a completing list.

Customization:
~scalai-import-search-method~ - has three ways to collecting imports.
- grep - the slowest method but it does not require any additional installation.
  Recommended to use with ~(setq scalai-cache-imports t)~

  WARN: There isn't implemented function to expire cache but you can use ~scalai-invalidate-cache~ to remove cache file.

- git-grep - search imports using git grep command [[https://git-scm.com/docs/git-grep][doc]]
- rg - search imports using [[https://github.com/BurntSushi/ripgrep][ripgrep]]

Example configuration:
#+begin_src emacs-lisp
(use-package scalai
  :ensure nil
  :load-path  "/path/to/office-utils/"
  :init
  (defun scalai-save-hook ()
    (whitespace-cleanup)
     (when (string-match "\\.scala\\'" buffer-file-name)
       (scalai-pretty-imports t)))

  (add-hook 'before-save-hook 'scalai-save-hook)

  :bind
  (:map scala-mode-map
        ("C-c o i" . scalai-pretty-imports)
        ("C-c f i" . scalai-find-import))
  :custom
  (scalai-ignore-import-list '("scala.util.chaining.scalaUtilChainingOps"
                               "scala.jdk.CollectionConverters.ConcurrentMapHasAsScala"))
  (scalai-import-search-method 'rg)
  (scalai-cache-imports nil))
#+end_src
** Yasnippets
Require to install [[https://github.com/joaotavora/yasnippet][yasnippet]]

Install:
- Just copy snippet into *~/.emacs.d/snippets/scala-mode* directory
- Create Symlinks
  #+begin_src bash
  ln -s /path/to/office-utils/snippets/scala-mode/{snippet} ~/.emacs.d/snippets/scala-mode/{snippet}
  #+end_src

*** defdoc
Auto documentation snippet inspired by [[https://ag91.github.io/blog/2018/11/07/a-docstring-for-scala-functions-through-yasnippet-/][ag91 blog docstring for scala functions]]

[[./yassnippet-scaladefdoc.gif][yassnippet-scaladefdoc.gif]]
* Jira :todo:
Transform .org to jira markdown
Call function ~jira-from-org-kill~ in .org file and get converted data in clipboard.

* Jsoni :todo:
Just one function to minimize json ~jsoni-minimalize~ in whole buffer

Before:
#+begin_src json
{
    "string": "some value",
    "array": [
        "hi there",
        "hi there again"
    ],
    "object": {
        "key1": "value",
        "key2": 999
    },
    "int": 100,
    "boolean": true,
    "booleanFalse": false
}
#+end_src
After:
#+begin_src json
{"string":"some value","array":["hi there","hi there again"],"object":{"key1":"value","key2":999},"int":100,"boolean":true,"booleanFalse":false}
#+end_src
* Mermaid :todo:
* Text-util :todo:
In general there are common function to edit files.

~text-util-from-camel-case-range~ - TransforCamelCaseRange to snake_case_range
* Restclienti
A few function which help me works with .http files

Demo:

[[./restclienti.gif][restclienti.gif]]
